package com.jiangKlijna.web.dao

import com.jiangKlijna.web.bean.*
import org.apache.ibatis.annotations.Param

//This interface corresponds to the database table blog_article
interface ArticleMapper {
    // This method was generated by MyBatis Generator.
    fun deleteByPrimaryKey(id: Int?): Int

    // This method was generated by MyBatis Generator.
    fun insert(record: Article): Int

    // This method was generated by MyBatis Generator.
    fun insertSelective(record: Article): Int

    // This method was generated by MyBatis Generator.
    fun selectByPrimaryKey(id: Int): Article?

    // This method was generated by MyBatis Generator.
    fun updateByPrimaryKeySelective(record: Article): Int

    // This method was generated by MyBatis Generator.
    fun updateByPrimaryKey(record: Article): Int

    // 通过username分页查找VArticle列表
    fun listByUser(@Param("username") username: String, @Param("limit") limit: Int, @Param("offset") offset: Int): List<VArticle>

    // 通过subjectid分页查找VArticle列表
    fun listBySubject(@Param("subjectid") subjectid: Int, @Param("limit") limit: Int, @Param("offset") offset: Int): List<VArticle>

    // 通过默认排序分页查找VArticle列表, index.do
    fun listByIndex(@Param("limit") limit: Int, @Param("offset") offset: Int): List<VArticle>

    // 通过search关键字查找VArticle列表, search.do
    fun listBySearch(@Param("limit") limit: Int, @Param("offset") offset: Int, @Param("search") search: String): List<VArticle>

    // 通过username关注列表分页查找VArticle列表, follow.do
    fun listByFollow(@Param("limit") limit: Int, @Param("offset") offset: Int, @Param("username") username: String): List<VArticle>

    // 通过id查找VArticle对象
    fun findById(id: Int): VArticle

}

//This interface corresponds to the database table blog_comment
interface CommentMapper {
    // This method was generated by MyBatis Generator.
    fun deleteByPrimaryKey(id: Int?): Int

    // This method was generated by MyBatis Generator.
    fun insert(record: Comment): Int

    // This method was generated by MyBatis Generator.
    fun insertSelective(record: Comment): Int

    // This method was generated by MyBatis Generator.
    fun selectByPrimaryKey(id: Int?): Comment

    // This method was generated by MyBatis Generator.
    fun updateByPrimaryKeySelective(record: Comment): Int

    // This method was generated by MyBatis Generator.
    fun updateByPrimaryKey(record: Comment): Int

    // 通过articleid分页查找VComment集合
    fun listByArticle(@Param("articleid") articleid: Int, @Param("limit") limit: Int, @Param("offset") offset: Int): List<VComment>
}

//This interface corresponds to the database table blog_follow_subject
interface FollowSubjectMapper {
    // This method was generated by MyBatis Generator.
    fun deleteByPrimaryKey(id: Int?): Int

    // This method was generated by MyBatis Generator.
    fun insert(record: FollowSubject): Int

    // This method was generated by MyBatis Generator.
    fun insertSelective(record: FollowSubject): Int

    // This method was generated by MyBatis Generator.
    fun selectByPrimaryKey(id: Int?): FollowSubject

    // This method was generated by MyBatis Generator.
    fun updateByPrimaryKeySelective(record: FollowSubject): Int

    // This method was generated by MyBatis Generator.
    fun updateByPrimaryKey(record: FollowSubject): Int

    // 查找fromuser是否关注了tosubject
    fun findByFromTo(@Param("fromuser") fromuser: Int, @Param("tosubject") tosubject: Int): FollowSubject?
}

//This interface corresponds to the database table blog_follow_user
interface FollowUserMapper {
    // This method was generated by MyBatis Generator.
    fun deleteByPrimaryKey(id: Int?): Int

    // This method was generated by MyBatis Generator.
    fun insert(record: FollowUser): Int

    // This method was generated by MyBatis Generator.
    fun insertSelective(record: FollowUser): Int

    // This method was generated by MyBatis Generator.
    fun selectByPrimaryKey(id: Int?): FollowUser

    // This method was generated by MyBatis Generator.
    fun updateByPrimaryKeySelective(record: FollowUser): Int

    // This method was generated by MyBatis Generator.
    fun updateByPrimaryKey(record: FollowUser): Int

    // 查找fromusername是否关注了tousername
    fun findByFromTo(@Param("fromusername") fromusername: String, @Param("tousername") tousername: String): VFollowUser?
}

//This interface corresponds to the database table blog_message
interface MessageMapper {
    // This method was generated by MyBatis Generator.
    fun deleteByPrimaryKey(id: Int?): Int

    // This method was generated by MyBatis Generator.
    fun insert(record: Message): Int

    // This method was generated by MyBatis Generator.
    fun insertSelective(record: Message): Int

    // This method was generated by MyBatis Generator.
    fun selectByPrimaryKey(id: Int?): Message

    // This method was generated by MyBatis Generator.
    fun updateByPrimaryKeySelective(record: Message): Int

    // This method was generated by MyBatis Generator.
    fun updateByPrimaryKey(record: Message): Int

    // 通过username分页查找VMessage列表
    fun listByUser(@Param("username") username: String, @Param("limit") limit: Int, @Param("offset") offset: Int): List<VMessage>

    // 统计userid未读的消息数量
    fun countUnread(userid: Int): Long
}

//This interface corresponds to the database table blog_subject
interface SubjectMapper {
    // This method was generated by MyBatis Generator.
    fun deleteByPrimaryKey(id: Int?): Int

    // This method was generated by MyBatis Generator.
    fun insert(record: Subject): Int

    // This method was generated by MyBatis Generator.
    fun insertSelective(record: Subject): Int

    // This method was generated by MyBatis Generator.
    fun selectByPrimaryKey(id: Int?): Subject

    // This method was generated by MyBatis Generator.
    fun updateByPrimaryKeySelective(record: Subject): Int

    // This method was generated by MyBatis Generator.
    fun updateByPrimaryKey(record: Subject): Int

    // 通过title查找Subject对象
    fun findSubjectByTitle(title: String): Subject?

    // 通过id查找VSubject对象
    fun findById(id: Int): VSubject

    // 通过默认排序分页查找VSubject列表, index.do
    fun listByIndex(@Param("limit") limit: Int, @Param("offset") offset: Int): List<VSubject>

    // 通过search关键字查找VSubject列表, search.do
    fun listBySearch(@Param("limit") limit: Int, @Param("offset") offset: Int, @Param("search") search: String): List<VSubject>

    // 通过username关注列表分页查找VSubject列表, follow.do
    fun listByFollow(@Param("limit") limit: Int, @Param("offset") offset: Int, @Param("username") username: String): List<VSubject>
}

//This interface corresponds to the database table blog_user
interface UserMapper {
    // This method was generated by MyBatis Generator.
    fun deleteByPrimaryKey(id: Int?): Int

    // This method was generated by MyBatis Generator.
    fun insert(record: User): Int

    // This method was generated by MyBatis Generator.
    fun insertSelective(record: User): Int

    // This method was generated by MyBatis Generator.
    fun selectByPrimaryKey(id: Int?): User

    // This method was generated by MyBatis Generator.
    fun updateByPrimaryKeySelective(record: User): Int

    // This method was generated by MyBatis Generator.
    fun updateByPrimaryKey(record: User): Int

    // 通过User对象查找是否存在
    fun findByUser(u: User): Long?

    // 通过username查找是否存在
    fun findByUsername(username: String): Long?

    // 通过username查找User对象
    fun findUserByName(username: String): User?

    // 通过username查找VUser对象
    fun getView(username: String): VUser?

    // 查找哪些人关注了userid,并且查询sess_userid是否关注这些人
    fun listByFollowUser(@Param("sess_userid") sess_userid: Int, @Param("userid") userid: Int): List<VUser>

    // 查找userid关注了哪些人,并且查询sess_userid是否关注这些人
    fun listByUserFollow(@Param("sess_userid") sess_userid: Int, @Param("userid") userid: Int): List<VUser>
}